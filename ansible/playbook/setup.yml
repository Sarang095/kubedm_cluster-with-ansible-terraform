- name: Basic Setup
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Wait 200 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 200

    - name: Create /etc/hosts template
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['ansible_host'] }} {{ hostvars[item]['inventory_hostname'] }}"
        state: present
        backup: yes
      loop: "{{ groups['all'] }}"

    - name: Disable swap on all nodes
      ansible.builtin.shell: swapoff -a

    - name: kernel module prerequesites
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF

    - name: add overlay module
      community.general.modprobe:
        name: overlay
        state: present

    - name: add br_netfilter module
      community.general.modprobe:
        name: br_netfilter
        state: present

    - name: sysctl params required by setup
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF

    - name: apply sysctl params without reboot
      ansible.builtin.shell: sysctl --system

    - name: create containerd config file
      ansible.builtin.shell: mkdir -p /etc/containerd && touch /etc/containerd/config.toml

    - name: Install containerd pre-reqs
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release

    - name: add docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Setting up the containerd runtime configurations
      block:
        - name: Making sure the unarchive directory exists 
          ansible.builtin.file: 
            path: "/opt/cni/bin/"
            state: directory

        - name: Install the CNI plugin latest version via shell command
          ansible.builtin.shell: |
            curl -sSL https://github.com/containernetworking/plugins/releases/download/v1.1.0/cni-plugins-linux-amd64-v1.1.0.tgz | tar -C /opt/cni/bin/ -xz
          args:
            creates: /opt/cni/bin/cni

          
        - name: Make the directory
          ansible.builtin.file:
            path: /etc/containerd
            state: directory
  
        - name: Generate CNI configurations
          ansible.builtin.shell: "containerd config default > /etc/containerd/config.toml"
          
        - name: Change the systemd driver of containerd
          ansible.builtin.replace:
            path: /etc/containerd/config.toml
            regexp: 'SystemdCgroup = false'
            replace: 'SystemdCgroup = true'
  

    - name: Restart service cron, in all cases, also issue daemon-reload to pick up config changes
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

    - name: Download Google Cloud's public key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        state: present

    - name: Add kubernetes repo
      ansible.builtin.apt_repository:
        repo: deb https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /
        state: present
        filename: kubernetes

    - name: Install kubadm, kubectl, kubelet
      ansible.builtin.apt:
        pkg:
          - kubelet
          - kubeadm
          - kubectl
    
    - name: Check if the service is unmasked
      ansible.builtin.shell: "systemctl is-enabled containerd"
      register: "masked_containerd"
      changed_when: false

    - name: Unmask the containerd, if masked 
      ansible.builtin.shell: "systemctl unmask containerd"
      when: masked_containerd.stdout == 'masked' 

    - name: Check if the kubelet is unmasked
      ansible.builtin.shell: "systemctl is-enabled kubelet"
      register: "kubelet_status"
      changed_when: false

    - name: Mask it if unmasked
      ansible.builtin.shell: "systemctl mask kubelet"
      when: kubelet_status.stdout == "masked"

    - name: Stop the kubelet service for avoiding the further conflicts when the kubedm init starts it
      ansible.builtin.service: 
        name: kubelet
        state: stopped
        enabled: true
      
    - name: Making sure the contained service is started
      ansible.builtin.service: 
        name: containerd
        state: started
        enabled: true 

    - name: Holding the kubectl,kubeadm,kubelet packages to make sure they further dont get updated by the apt  
      ansible.builtin.shell: apt-mark hold kubelet kubectl kubeadm

- name: Setup Control Plane Node
  hosts: control_plane
  become: true
  tasks:
    - name: init kubeadm
      ansible.builtin.shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint "{{ansible_host}}:6443"
      register: kubeadm_init_result
      ignore_errors: true

    - name: Debugging if the kubedm cluster is started
      ansible.builtin.debug:
        msg: "{{ kubeadm_init_result }}"

    - name: create ~/.kube directory
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: "0755"

    - name: copy kubeconfig file
      shell: cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    - name: set the correct permission on kubeconfig file
      shell: chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Install calico for pod networking  
      ansible.builtin.shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    - name: Copy kubeconfig file locally
      ansible.builtin.fetch:
        src: $HOME/.kube/config
        dest: /tmp/kubeconfig/
        flat: yes

    - name: Generate join token for worker nodes   
      ansible.builtin.shell: kubeadm token create --print-join-command  
      register: join_node_token 
      failed_when: join_node_token.stdout == ""

    - name: Save join command as variable
      ansible.builtin.set_fact:
        join_node: "{{ join_node_token.stdout_lines[0] }}"

    - name: Label the master node
      shell: "kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/master=master"  

- name: Setup Worker Nodes
  hosts: workers
  become: true
  tasks:
    - name: add worker nodes to cluster
      shell: "sudo {{ hostvars['control_plane'].join_node }}"  
      when: hostvars['control_plane'].join_node is defined

    - name: Label the worker node
      shell: "kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/worker=worker"
